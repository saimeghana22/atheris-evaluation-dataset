import atheris
import sqlite3
import sys  # Required for Atheris to parse its arguments

def vulnerable_sql(data):
    conn = sqlite3.connect(':memory:')  # In-memory database
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE users (id INTEGER, name TEXT)")
    cursor.execute("INSERT INTO users VALUES (1, 'Alice'), (2, 'Bob')")

    try:
        # Vulnerable to SQL Injection
        query = f"SELECT * FROM users WHERE name = '{data}'"
        cursor.execute(query)
        # print(cursor.fetchall())
    except sqlite3.OperationalError:
        print("SQL Error")
    finally:
        conn.close()

def test_sql_input(data):
    fdp = atheris.FuzzedDataProvider(data)
    fuzz_input = fdp.ConsumeUnicodeNoSurrogates(20).strip()
    if fuzz_input:  # Ensure input is non-empty
        vulnerable_sql(fuzz_input)

if __name__ == "__main__":
    atheris.Setup(sys.argv, test_sql_input)  # Correctly pass sys.argv
    atheris.Fuzz()
